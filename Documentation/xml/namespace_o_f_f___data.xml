<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespace_o_f_f___data" kind="namespace" language="Python">
    <compoundname>OFF_Data</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_o_f_f___data_1a826cab3cf308a0e882e8386544f49f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def OFF_Data.serialize_data</definition>
        <argsstring>(rawData)</argsstring>
        <name>serialize_data</name>
        <param>
          <type>rawData</type>
          <defname>rawData</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>serialize_data() will return a JSON object that represents the raw data
passed

*** WARNING: THIS WORKS BEST WHEN rawData IS A DICTIONARY. OTHER FORMATS
ARE NOT CURRENTLY HANDLED WELL IN THE OFF_Network send_comm() METHOD ***

Restrictions:
    rawData must be a dictionary, string, or int

If an exception occurs, return ERROR? False? None? What do I do?
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OFF_Data.py" line="19" column="1" bodyfile="OFF_Data.py" bodystart="19" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespace_o_f_f___data_1a59279364cc977ebb5b368377494c10ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def OFF_Data.deserialize_data</definition>
        <argsstring>(serialData)</argsstring>
        <name>deserialize_data</name>
        <param>
          <type>serialData</type>
          <defname>serialData</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>deserialize_data will attempt to unserialize and return data

Data received should be easily convertable. The following has a table
with the encode / decode formats for  JSON to Python
https://docs.python.org/3/library/json.html#json-to-py-table

Restrictions:
    serialData is currently limited to JSON only

If an exception occurs, return ERROR? False? None? What do I do?
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OFF_Data.py" line="40" column="1" bodyfile="OFF_Data.py" bodystart="40" bodyend="60"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>@package docstring
Official Fortran Fanclub Data Module

OFF_Data.py will handle all the (de)serialization that&apos;s necessary so that any
changes to how we handle data is separated from the network code

Currently only JSON formats are acceptable

See https://docs.python.org/3/library/json.html#json-to-py-table for details
on how the data is being transformmed

I&apos;m sorry that I didn&apos;t write this well, you shouldn&apos;t need to manually
(de)serialize data! The first extension anyone adds should be to add automatic
message (de)serializatin
</verbatim> </para>    </detaileddescription>
    <location file="OFF_Data.py" line="1" column="1"/>
  </compounddef>
</doxygen>
